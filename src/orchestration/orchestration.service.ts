// orchestration.service.ts
import { Inject, Injectable, Logger } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { firstValueFrom } from 'rxjs';
import OpenAI from 'openai';
import Redis from 'ioredis';
import { WhatsappService } from 'src/whatsapp/whatsapp.service';

@Injectable()
export class OrchestrationService {
  @Inject('REDIS_CLIENT') private readonly redis: Redis
  private readonly logger = new Logger(OrchestrationService.name);
  private readonly openai: OpenAI;
  private readonly whatsappService: WhatsappService
  private readonly BASE_URL = process.env.EVOLUTION_BASE_URL;
  private readonly INSTANCE = process.env.EVOLUTION_INSTANCE;
  constructor(private readonly http: HttpService) {
    this.openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });
  }

// orchestration.service.ts
async registerWebhook() {
  const instanceName = 'impetus';
  const url = `http://localhost:8080/webhook/set/${instanceName}`;
  const headers = {
    'Content-Type': 'application/json',
    apikey: process.env.AUTHENTICATION_API_KEY,
  };

  const payload = {
    webhook: {
      enabled: true,
      url: `${process.env.WEBHOOK_URL ?? 'http://localhost:3000'}/webhook`,
      headers,
      byEvents: false,
      base64: false,
      events: ['MESSAGES_UPSERT'],
    },
  };

  try {
    await firstValueFrom(this.http.post(url, payload, { headers }));
    this.logger.log('Webhook registrado com sucesso na Evolution API');
  } catch (error) {
    this.logger.error('Erro ao registrar webhook:', error.message);
  }
}

  async handleIncomingMessage(body: any) {
    
    const message = body.data.message?.conversation;
    const phone = body.data?.key?.remoteJid;
    console.log(body, "body");
    console.log("-------------")
    console.log(message, phone, "phone");
    if (!message || !phone) return;


    const resposta = await this.generateAiReply(message, phone);
    console.log(resposta, "log na resposta da ia ");
    return this.sendWhatsAppMessage(phone, resposta);
  }

  async generateAiReply(userMessage: string, phone: string) {
    const contextoAnterior = await this.getContexto(phone);

const systemPrompt = {
  role: 'system',
  content: `
Seu nome √© Raphael e voc√™ √© um SDR humano da empresa Impetus, uma aceleradora comercial que ajuda neg√≥cios a destravarem seu crescimento por meio de diagn√≥stico, estrutura√ß√£o e acelera√ß√£o de vendas.

Voc√™ est√° conversando via WhatsApp com um potencial cliente (lead) e seu objetivo √© qualificar esse lead. NUNCA diga que √© uma intelig√™ncia artificial ‚Äî voc√™ √© um humano real da equipe.

A conversa deve ser natural, amig√°vel e com linguagem humana. N√£o use termos t√©cnicos, n√£o seja rob√≥tico. Evite respostas longas demais.

Seu papel como SDR √©:

1. Cumprimentar de forma simp√°tica e informal.
2. Validar se a pessoa √© tomadora de decis√£o ou respons√°vel pelo comercial.
3. Descobrir qual √© o maior desafio comercial da empresa no momento.
4. Confirmar se h√° interesse em destravar o crescimento com um m√©todo validado.
5. Caso a pessoa mostre interesse, enviar o link de cadastro: https://lp.impetusaceleradora.com/bio
6. Caso a pessoa esteja ocupada ou indecisa, oferecer retomar o papo em outro momento.

Exemplo de in√≠cio de conversa:
‚Äî
Oi! Tudo bem? Quem fala aqui √© o Raphael, da Impetus üòä
A gente ajuda empresas que querem vender mais e crescer com processo estruturado. Voc√™ √© quem cuida da parte comercial por a√≠?
‚Äî

Exemplo de condu√ß√£o:
‚Äî
Entendi! E hoje, qual seria o maior desafio de voc√™s quando o assunto √© vendas?
‚Äî

Caso o lead diga que quer saber mais, envie a explica√ß√£o:
‚Äî
Legal! A Impetus √© uma aceleradora comercial. A gente mapeia todo o processo de vendas da empresa, corrige os gargalos e aplica um m√©todo pr√°tico de acelera√ß√£o. Funciona pra quem j√° tem opera√ß√£o e quer escalar com previsibilidade.

Se fizer sentido pra voc√™, pode se cadastrar por aqui que a gente j√° entra em contato: https://lp.impetusaceleradora.com/bio
‚Äî

Se a pessoa disser que n√£o √© a respons√°vel:
‚Äî
Show! Voc√™ poderia me passar o contato da pessoa que cuida disso por a√≠?
‚Äî

Nunca diga que voc√™ √© um rob√¥ ou intelig√™ncia artificial. Voc√™ deve se comportar como um humano real da equipe da Impetus.

Fale com naturalidade, como um humano treinado em vendas que conhece o produto. Escreva como um brasileiro falaria no WhatsApp.
`
};


    const completion = await this.openai.chat.completions.create({
      model: 'gpt-4',
      messages: [
        systemPrompt,
        ...contextoAnterior,
        { role: 'user', content: userMessage },
      ],
    });

    const resposta = completion.choices[0].message?.content ?? '...';

    await this.saveContexto(phone, [
      ...contextoAnterior,
      { role: 'user', content: userMessage },
      { role: 'assistant', content: resposta },
    ]);

    return resposta;
  }

  async sendWhatsAppMessage(phone: string, content: string) {
    const url = `${this.BASE_URL}/message/sendText/${this.INSTANCE}`;
    const headers = { apikey: process.env.AUTHENTICATION_API_KEY };
    const payload = {
      number: phone,
      text: content,
    };

    const response = await firstValueFrom(this.http.post(url, payload, { headers }));
    return response.data;
  }

  // Em produ√ß√£o, substitua por banco ou Redis
  private contextoMap = new Map<string, any[]>();

  async getContexto(phone: string) {
  const raw = await this.redis.get(`context:${phone}`);
  return raw ? JSON.parse(raw) : [];  }

async saveContexto(phone: string, contexto: any[]) {
  const contextoLimitado = contexto.slice(-10); // mant√©m s√≥ os √∫ltimos 10 pares user/assistant
  await this.redis.set(`context:${phone}`, JSON.stringify(contextoLimitado), 'EX', 3600);
}

  // async onModuleInit() {
  //   console.log("Inicializando m√≥dulo...");
  //   await this.registerWebhook();
  // }
}
